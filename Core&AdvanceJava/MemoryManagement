1. What is JVM?
-> The Java Virtual Machine (JVM) is an abstract machine that runs Java bytecode. It provides platform independence by
   executing .class files on any OS with a JVM implementation.

2. Difference between JDK, JRE, and JVM.
-> JDK = JRE + Development tools((to develop + run Java apps)
   JRE = JVM + Libraries(to run Java apps)
   JVM = Runs the bytecode

3. What is JIT compiler?
-> JIT Compiler: Converts frequently used bytecode into native machine code at runtime (faster).
   The execution flow -
   Java source code (.java) → compiled by javac (Java compiler) → into bytecode (.class).
   JVM loads the bytecode using the ClassLoader.
   Execution inside JVM happens in two possible ways:
   Interpreter: Reads and executes bytecode instruction by instruction (slower).
   JIT Compiler: Converts frequently used bytecode into native machine code at runtime (faster).

4. Explain JVM architecture.
->

5. What are the different class loaders in Java?
6. What is the parent delegation model in class loaders?
7. What is the method area in JVM?
8. What is the heap in JVM?
9. Difference between heap memory and stack memory.
10. What is PermGen?
11. What replaced PermGen in Java 8?
12. Difference between Metaspace and PermGen.
12. What is garbage collection in Java?
13. Difference between minor GC and major GC.
14. What are garbage collection roots?
15. What is reference counting in GC?
16. Why is reference counting not used in JVM GC?
17. What are strong, weak, soft, and phantom references?
18. What is a memory leak in Java?
19. What are stop-the-world events in GC?
20. What is the difference between Serial, Parallel, CMS, and G1 collectors?
21. Which garbage collector is default in Java 8?
22. Which garbage collector is default in Java 11?
23. How do you trigger garbage collection manually?
24. Why is calling System.gc() not recommended?