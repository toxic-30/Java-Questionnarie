1. What are the main principles of Object-Oriented Programming?
-> The 4 main pillars of OOPS are -
   Encapsulation → Binding data + methods, hiding implementation.
   Abstraction → Hiding details, showing essentials (via interfaces/abstract classes).
   Inheritance → Reusing code by acquiring parent properties.
   Polymorphism → One thing, many forms (overloading/overriding).

2. Difference between == and .equals() in Java?
-> == this checks whether 2 string are of same memory location and .equals checks the content of the string.

3. Can you override a static method in Java? Why/why not?
-> No, static method belongs to class, so they are decided at compile time not runtime and its object/instance
   cannot be created

4. Explain constructor overloading vs method overloading.
-> Constructor Overloading = Same class, different constructors → object creation flexibility.
   Method Overloading = Same class, same method name, different params → functional flexibility.

5. What is method overriding and rules for overriding in Java?
-> Method overriding happens when a subclass (child class) provides a specific implementation of a method that is already defined in its parent (superclass).
   It is used to achieve runtime polymorphism (dynamic method dispatch) and to allow a subclass to provide a
   specialized behavior for a parent’s method.
   Rules -
   Same Method Signature - Method name and parameter list must be exactly same as the parent class method.
   Return Type must be the same as parent’s method OR a covariant type (subclass of parent’s return type).
   Access Modifier - Cannot reduce the visibility of the parent’s method. Example: If parent method is public, child
   cannot make it protected or private. But it can increase visibility (e.g., protected → public).
   Exceptions - Child method cannot throw broader checked exceptions than parent. Example: If parent method throws
   IOException, child can throw IOException or subclass of it, but not a broader exception like Exception.
   @Override Annotation - Optional, but useful — compiler will check if you are actually overriding correctly.

6. Difference between final, finally, and finalize().
-> Final - If we mark any class, variable or method as final, so we cannot change it's value.
   so we cannot override the final method and Final class cannot be extended
   Finally is used with try-catch block, it means irrespective of exception, the finally method will execute. So any
   logic which we need to take place after exception also should be kept in finally block.
   Finalize = Method called by GC before object destruction (now deprecated).

7. What is the difference between abstract class and interface?
-> Abstract Class - Can have abstract methods and concrete (implemented) methods.
                    Can have abstract methods, default methods, static and private methods.
                    Method can be public, protected and private.
                    Can extend only 1 abstract class.
                    Can have constructor
   Interface - Can have instance variables, static variables, and constants.
               Only public static final constants (no instance variables)
   	           All methods need to be public.
   	           Can implement multiple interfaces.
               Cannot have constructor

8. Can an abstract class have a constructor?
-> Yes abstract class can have a constructor, to allow its fields to be initialized when subclasses are created.
   You cannot directly create an object of an abstract class

9. Explain the super keyword and its use cases.
-> Super keyword is used in method overriding.
   When a subclass overrides a method, sometimes it still wants to use the parent class’s version of that method.
   That’s where super comes in, it is used to call the overridden method of the parent class.
   Use case - Access parent's class variable and Call parent class constructor.

10. Can we declare a class as both abstract and final? Why not?
->	No, as class is marked abstract so that other class can inherited it, but if it would be declared final so it would
    not be extended.

11. What happens if you don’t provide a constructor in a class?
->  By default every class has constructor, without constructor initialization of class is not possible.

12. Difference between stack and heap memory in Java.
->| Stack Memory                                                                | Heap Memory
  |-----------------------------------------------------------------------------|---------------------------------------------------------------------------
  | Stores method execution details like local variables, references, and calls.| Stores objects and instance variables created at runtime.
  | Automatically allocated/deallocated when a method is called/returns.        | Allocated when `new` keyword is used, freed by Garbage Collector.
  | Local primitive variables Object references (not objects themselves)        | All objects created using `new` nd Instance variables of objects
  | and Method call frames, all these are stored in stack memory                | are stored in heap memory.
  | Exists only during method execution; stack frame removed after method ends. | Objects remain until no reference points to them, then GC clears them.
  | Smaller and fixed per thread.                                               | Larger, depends on JVM and system.
  | Each thread has its own stack.                                              | Heap is shared among all threads.
  | Faster (managed in LIFO order).                                             | Slower (complex memory management + GC).
  | Stack memory overflow → `StackOverflowError`.                               | Heap memory overflow → `OutOfMemoryError: Java Heap Space`.

12. What is the default value of local variables in Java?
->  Local variables do not get any default value. They must be initialized before use, otherwise the compiler will throw an error.

13. Explain pass by value vs pass by reference in Java.
->  Pass by Value - A copy of the variable’s value is passed to the method. Changes inside the method do not affect the
    original variable. Primitive types are always passed by value in Java.
    Pass by Reference - Java is technically never pass by reference

14. What is the use of this keyword?
->  The this keyword in Java refers to the current object. It is mainly used to:
    Differentiate instance variables from local variables.
    Invoke current class methods.
    Call one constructor from another (constructor chaining).
    Pass the current object as an argument.
    Return the current object (useful for method chaining).

15. Difference between shallow copy and deep copy in Java.
->  Shallow copy - Copies the object and references of contained objects (not the actual objects themselves)
    Deep copy - Copies the object and all the objects it references (recursively)

16. Can you create an immutable class? How?
->  Yes, we can create an immutable class. The below given steps need to be followed -
    Declare the class as final. Make all the fields private and final.
    No setter method as it can modify fields. Initialize fields only through constructor.
    For mutable fields - create defensive copy for these fields, also, take a copy in the constructor to avoid outside modification.

17. What is a marker interface? Give examples.
->  A marker interface is an interface that does not have any methods or fields. It is used to mark (tag) a class so
    that the JVM or frameworks can give special treatment to those classes. Basically, it conveys metadata about the
    class to the JVM/compiler.

18. What is the difference between String, StringBuilder, and StringBuffer?
->	String → Immutable, safe to share, but costly in modifications.
    StringBuilder → Mutable, fast, but not synchronized (best in single-threaded apps).
    StringBuffer → Mutable, synchronized, hence thread-safe but slower (used in multi-threaded apps).

19. Why are strings immutable in Java?
->  Security: Strings are widely used in class loading, database URLs, file paths. If mutable, malicious code could change them.
    Caching: String literals are stored in the String Pool. Immutability ensures one object can be shared safely.
    Thread-safety: Immutable objects are automatically thread-safe.
    Hashing: Strings are often used as keys in HashMap/HashSet. Their immutability ensures hashCode remains consistent.

20. What are wrapper classes in Java?
->  A wrapper class is a class that is used to convert a primitive data type into an object. Java provides wrapper
    classes for all primitive types, and they are defined in the java.lang package.

21. Difference between primitive types and reference types.
->  Primitive types store actual values, directly in stack memory (value itself is stored).
    Reference types store addresses (pointers) to objects. The reference(address) is stored in stack, but the actual
    object is stored in heap memory.

22. What is autoboxing and unboxing?
->  Autoboxing is the automatic conversion of a primitive type into its corresponding wrapper class object.
    Unboxing is the automatic conversion of a wrapper class object into its corresponding primitive type.

23. Explain Java memory model.
->

24. Can main() be overloaded in Java?
->  Yes, we can overload the main() method in Java like any other method. But JVM always calls only public static void
    main(String[] args) as the starting point. Other overloaded versions are just normal methods and can only be called
    explicitly.

25. What happens if we make main() non-static?
->  If we make main() non-static, JVM won’t recognize it as the program entry point and runtime error will happen.
    main() must be static so that JVM can invoke it without creating an object.However, we can define a non-static
    main() as an overloaded method, but it must be called explicitly from the static one.

26. What is a static block? When is it executed?
->  A static block in Java is a block of code inside a class, declared using the static keyword.It is used to initialize
    static variables or perform operations that should run once per class loading.

27. Difference between static variable and instance variable.
->  Static variables belong to the class and are shared by all objects. Static variables are initialized once when the
    class is loaded.
    Instance variables belong to the object and each object has its own copy. Instance variables are initialized when
    an object is created.

28. What are default methods in interfaces?
->  A default method is a method in an interface that has a body (implementation), introduced in Java 8. It allows
    interfaces to evolve without breaking existing implementations, and implementing classes can optionally override it.

29. What is multiple inheritance and why is it not supported?
->  Multiple inheritance is a feature where a class can inherit from more than one parent class. It allows a class to
    acquire properties and methods from multiple classes.
    Reasons why multiple inheritance is not allowed -
    Diamond Problem / Ambiguity: If two parent classes have a method with the same signature, the compiler won’t know
    which one to inherit.
    Complexity in object layout: Multiple inheritance complicates memory layout of objects and method dispatch.
    Java prefers simplicity and safety. Instead, it uses interfaces to achieve multiple inheritance.

30. How do interfaces achieve multiple inheritance?
->  Java interfaces allow multiple inheritance by letting a class implement multiple interfaces. Since interfaces define
    only method signatures (and optionally default/static methods), there’s no ambiguity in state or behavior, avoiding
    the diamond problem associated with class inheritance

31. What is the difference between abstract methods and default methods?
32. Can we declare an interface method as private?
33. Explain covariant return types.
34. Can you override a private method?
35. What is a transient variable in Java?
36. Difference between volatile and transient keywords.
37. What is the use of strictfp keyword?
38. Explain the lifecycle of an object in Java.
39. Can constructors be synchronized?
40. What is object cloning in Java?
41. How do you prevent object cloning?
42. Difference between deep copy and shallow copy in cloning.
43. What is an inner class? Types of inner classes.
44. Difference between static nested class and inner class.
45. Can we define an interface inside a class?
46. Explain local inner classes.
47. What is an anonymous inner class?
48. What is a functional interface?
49. Difference between checked and unchecked exceptions.
50. Can we catch multiple exceptions in a single catch block?
51. Difference between throw and throws.
52. What is try-with-resources in Java?
53. Can we write multiple finally blocks?
53. Difference between error and exception.
54. Can we rethrow an exception?
55. Explain custom exceptions in Java.
56. What happens if finally block has return statement?
57. Can a constructor throw an exception?
58. Difference between compile-time error and runtime error.
59. What is the default exception handler in Java?
60. Explain NoClassDefFoundError vs ClassNotFoundException.
61. Explain OutOfMemoryError and how to fix it.
62. Difference between checked exception and runtime exception.
63. What is the difference between throw new Exception() and throw new RuntimeException()?
64. Can we create our own Error class?
65. How does garbage collection work in Java?
66. What are different GC algorithms in Java?
67. Difference between System.gc() and Runtime.gc().
68. Can we force garbage collection in Java?
69. What is finalize() and when is it called?
70. Why is finalize() not recommended?
71. Difference between strong, weak, soft, and phantom references.
72. Explain memory leaks in Java.
73. What are memory pools in JVM?
74. Difference between JDK, JRE, and JVM.
75. Explain Just-In-Time (JIT) compiler.
76. What are classloaders in Java?
77. What is the difference between bootstrap, extension, and application classloader?
78. Explain parent delegation model in classloading.