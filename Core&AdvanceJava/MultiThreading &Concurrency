1. What is multithreading in Java?
-> Multithreading is the concurrent execution of two or more threads. It allows Java programs to perform multiple tasks
   simultaneously, improving CPU utilization.
2. Difference between process and thread.
-> Process: Independent execution unit with its own memory space. Heavyweight.
   Thread: Lightweight sub-unit of a process, shares memory with other threads in the same process.
3. How do you create a thread in Java?
-> By extending Thread class and overriding run().
   By implementing Runnable interface and passing it to a Thread object.
   By using Executors / Callable / Future (modern way).
4. Difference between extending Thread class and implementing Runnable.
-> Thread: Canâ€™t extend any other class (since Java allows single inheritance).
   Runnable: More flexible, preferred, allows implementing multiple interfaces.
   Runnable method is mostly preferable as it provides better reusability and flexibility.

5. What is the difference between start() and run()?
-> start() - Present in Thread class, Creates a new thread and then calls run() on it.
             It runs run() in a separate thread
   run() - It is a method present in Runnable interface, run() in the current thread

6. What happens if you call run() method directly?
-> It will execute as a method in main thread, not of any new thread.

7. What is thread lifecycle in Java?
->  NEW   -->   RUNNABLE   -->   RUNNING   -->   TERMINATED
                  ^     |              |
                  |     v              v
                WAITING / TIMED_WAITING / BLOCKED

8. Difference between daemon thread and user thread.
-> User Thread = The default type of thread in Java. Keeps the JVM alive until all user threads have finished.
   Daemon Thread = A background service thread that provides support to user threads.JVM does not wait for daemon
 threads to finish; it exits as soon as all user threads are done.Used for tasks like garbage collection, logging, etc.

9. What is the default priority of a thread?
->  Every Java thread has a priority, which helps the Thread Scheduler decide which thread to run first.
    Priority is an integer value between 1 and 10: Thread.MIN_PRIORITY = 1, NORM_PRIORITY = 5, MAX_PRIORITY = 10

10. Can we change thread priority in Java?
->  Yes, we can change thread priority using setPriority(int) method but actual scheduling depends on OS.

11. What is thread scheduler in Java?
->  The Thread Scheduler is part of the JVM + Operating System that decides which thread runs at any given time when
multiple threads are in the Runnable state. We cannot control it directly in any way.

12. Difference between time slicing and preemptive scheduling.
-> In preemptive scheduling, the highest-priority thread always runs first.If a new thread with higher priority becomes
ready, it preempts (interrupts) the currently running thread. Thread execution order depends mostly on priority.
Time Slicing - CPU time is divided into small time slices (quantums). Each thread gets a fair share of CPU for its time
slice. After its time expires, the next thread gets CPU, even if the current thread is not finished. Execution rotates
in a round-robin fashion

12. What is the purpose of sleep() method in Thread?
->  sleep() method is used to pause thread from running for specified amount of time and move it to the waiting state,
but it didn't release lock. Ex- t1.sleep(2000) -> pause for 2 sec.

13. Difference between sleep() and wait().
->  
14. Can we call wait() without synchronization?
15. Difference between wait(), notify(), and notifyAll().
16. What happens if a thread calls wait() and never gets notified?
17. Can notify() wake up multiple threads?
18. Difference between synchronized method and synchronized block.
19. What is the use of volatile keyword?
20. Difference between volatile and synchronized.
21. What is the happens-before relationship in Java Memory Model?
22. What are atomic operations in Java?
23. What is the difference between AtomicInteger and synchronized int?
24. What is deadlock in Java?
25. How do you avoid deadlock?
26. What is livelock?
27. What is starvation in multithreading?
28. Difference between deadlock, livelock, and starvation.
29. What is the difference between concurrency and parallelism?
30. What is ThreadLocal in Java?
31. When should we use ThreadLocal?
32. What is the difference between Callable and Runnable?
33. What is Future in Java concurrency?
34. What is ExecutorService in Java?
35. Difference between submit() and execute() in ExecutorService.
36. What is ScheduledExecutorService?
37. How do you shut down ExecutorService?
38. Difference between shutdown() and shutdownNow().
39. What is ForkJoinPool in Java?
40. Difference between ForkJoinPool and ThreadPoolExecutor.
41. What is the join() method in threads?
42. What is the yield() method in threads?
43. Difference between yield() and sleep().
44. What is the difference between interrupt() and stop()?
45. Why is stop() deprecated in Java?
46. What is the ReentrantLock class?
47. Difference between ReentrantLock and synchronized.
48. What is ReadWriteLock in Java?
49. Difference between fair and non-fair locks in ReentrantLock.